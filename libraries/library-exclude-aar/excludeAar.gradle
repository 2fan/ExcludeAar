//需要过滤的包名
def excludePackages = ['com.baidu']
//需要过滤的类(需要全类名)
def excludeClasses = []

//这么写也可以 configurations.maybeCreate("exclude")
configurations {
    exclude
}

task printMsg {
    group "Siy"

    doLast {
        println getExcludePackageRegex(excludePackages)
        println getExcludeClassRegex(excludeClasses)
    }
}

/**
 * 解压aar包得到文件存放的目录
 */
def unZipAarFile = new File(buildDir, "unzipaar")

/**
 * 解压aar中jar包得到文件存放的目录
 */
def unZipJarFile = new File(buildDir, 'unzipjar')

/**
 * 存放过滤后生成的aar包的目录
 */
def excludeAarFile = new File(buildDir, "excludeaar")

/**
 * 过滤后aar包的名称
 */
def excludeAarName = "exclude_${getDefaultAar().name.replaceFirst(~/\.[^.]+$/, '')}"


/**
 *
 * 获取名称为default的Configuration，并且过滤.aar文件
 *
 * @return
 */
def getDefaultAar() {
    Configuration c = configurations.getByName("default")
    def files = c.artifacts.files.filter {
        it.name ==~ /.*\.aar/
    }

    def file = null
    if (!files.empty) {
        file = files[0]
    }
    return file
}

/**
 * 删除unZipAarFile, unZipJarFile, excludeAarFile
 */
task deleteDir(type: Delete) {
    delete unZipAarFile, unZipJarFile, excludeAarFile
}


/**
 * 解压getDefaultAar()返回的aar包
 */
task unZipAar(type: Copy) {
    def zipFile = getDefaultAar()
    def outputDir = unZipAarFile
    from zipTree(zipFile)
    into outputDir
}
unZipAar.dependsOn deleteDir


/**
 * 解压aar包中包含的jar包
 */
task unzipJar(type: Copy) {
    def zipFile = new File(unZipAarFile, 'classes.jar')
    def outputDir = unZipJarFile
    from zipTree(zipFile)
    into outputDir
}

unzipJar.dependsOn unZipAar


/**
 * 用Jar任务过滤并生成新的jar包
 */
task zipJar(type: Jar) {
    baseName = 'classes'
    from unZipJarFile
    destinationDir unZipAarFile
    exclude getExcludePackageRegex(excludePackages)
    exclude getExcludeClassRegex(excludeClasses)
}

zipJar.dependsOn unzipJar

/**
 * 重新把文件压缩成新的aar包
 */
task excludeAar(type: Zip) {
    group 'Siy'
    description '生成一个过滤之后的aar包'
    baseName excludeAarName
    extension "aar"
    from unZipAarFile
    destinationDir excludeAarFile
}

excludeAar.dependsOn zipJar


//这么写也可以 artifacts.add("exclude", excludeAar)
artifacts {
    exclude excludeAar
}


static def getExcludePackageRegex(def packages) {
    packages?.collect {
        it?.replace('.', '\\')?.plus("\\**")
    }
}

static def getExcludeClassRegex(def classes) {
    classes?.collect {
        it?.replace('.', '\\')?.plus(".class")
    }
}